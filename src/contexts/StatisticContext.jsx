import { useEffect, useState, createContext, useContext } from "react";

// cr√©ation de la constante alertMessages pour les √©v√©nements avec id, type et message
const alertMessages = [
    {
        id: 1,
        type: "bonus",
        message: "üí∞ Vous trouvez un billet de 20‚Ç¨ par terre !"
    },
    {
        id: 2,
        type: "malus",
        message: "üè† Vous avez oubli√© de payer votre loyer‚Ä¶"
    },
    {
        id: 3,
        type: "bonus",
        message: "üéûÔ∏è Un ami vous invite au cin√©ma gratuitement !"
    },
    {
        id: 4,
        type: "malus",
        message: "üå°Ô∏è Vous tombez malade‚Ä¶"
    }
];


// On cr√©√© le contexte
const StatisticContext = createContext();

// On cr√©√© un provider
export function StatisticProvider({ children }) {

    // √âtats des statistiques, avec une valeur de d√©bnut de partie
    const [energy, setEnergy] = useState(100);
    const [mood, setMood] = useState(100);
    const [money, setMoney] = useState(50);

    // √âtat du GameOver et message de fin de partie
    const [gameOver, setGameOver] = useState(false);
    const [gameOverMessage, setGameOverMessage] = useState(null);

    // √âtats d'alerte √©venements al√©atoires
    const [alertMessage, setAlertMessage] = useState(null); // message d'alerte √† afficher
    const [alertType, setAlertType] = useState(null);   // type d'alerte
    const [alertVisible, setAlertVisible] = useState(false);  // √©tat d'affichage de l'alerte (visible ou non)


////// Cr√©ation des diff√©rentes fonctions du jeu
    function Eat() {
        // On change la valeur de l'energie en partant de sa valeur actuelle √† laquelle on ajoute 20
        // Avec Math.min, on le fais selectionner la valeur la plus petite entre 100 (valeur max)
        // et la nouvelle valeur calcul√©e
        setEnergy(actualValue => Math.min(actualValue + 20, 100)); // Augmente l'√©nergie de 20, max 100
        setMood(actualValue => Math.max(actualValue - 5, 0)); // Diminue l'humeur de 5, min 0
        setMoney(actualValue => Math.max(actualValue - 10, 0)); // Diminue l'argent de 10, min 0
    }

    function Work() {
        setEnergy(actualValue => Math.max(actualValue - 30, 0)); // Diminue l'√©nergie de 30, min 0
        setMood(actualValue => Math.max(actualValue - 10, 0)); // Diminue l'humeur de 10, min 0
        setMoney(actualValue => Math.min(actualValue + 40, 100)); // Augmente l'argent de 40, max 100 (choisi pour faciliter l'affichage des barres de niveau)
    }

    function Sleep() {
        setEnergy(actualValue => Math.min(actualValue + 50, 100)); // Augmente l'√©nergie de 50, max 100
        setMood(actualValue => Math.max(actualValue - 5, 0)); // Diminue l'humeur de 5, min 0
        // Ne change pas la valeur de l'argent
    }

    function Play() {
        setEnergy(actualValue => Math.max(actualValue - 10, 0)); // Diminue l'√©nergie de 10, min 0
        setMood(actualValue => Math.min(actualValue + 30, 100)); // Augmente l'humeur de 30, max 100
        setMoney(actualValue => Math.max(actualValue - 20, 0)); // Diminue l'argent de 20, min 0
    }


////// Cr√©ation de la d√©gradation automatique des statistiques
    function degradeStats() {
        setEnergy(actualValue => Math.max(actualValue - 5, 0)); // Diminue l'√©nergie de 5, min 0
        setMood(actualValue => Math.max(actualValue - 5, 0)); // Diminue l'humeur de 5, min 0
        // argent ne change pas
    }

    // Gestion de la d√©gradation automatique des statistiques avec un useEffect
    useEffect(() => {
        // On utilise un useEffect pour executer ce code apr√©s le chargement du composant
        // Cr√©ation de la constante degradation
        // On utilise un setInterval pour diminuer les statistiques toutes les 10 secondes
        const degradation = setInterval(degradeStats, 10000); // Toutes les 10 secondes

        return () => clearInterval(degradation); // On arrete le timer de la d√©gradation lorsque la page est ferm√©e (au d√©montage)
    }, []); // Il n'y a pas de d√©pendances, donc cela ne s'ex√©cute qu'au montage


////// Cr√©ation de la function reset
    function resetStats() {
        setEnergy(100);
        setMood(100);
        setMoney(50);
        setGameOver(false);
        setGameOverMessage(null);
        setAlertMessage(null);
        setAlertType(null);
        setAlertVisible(false)
    }

////// Cr√©ation des evenements al√©atoires
    // On utilise un useEffect pour executer ce code au chargement du composant
    useEffect(() => {
        // On cr√©√© la variable timeoutId pour arreter le timer lors du d√©montage
        let timeoutId;

        function getRandomEvent() {

            // On choisi un √©v√©nement au hasard
            const randomEvent = alertMessages[Math.floor(Math.random() * alertMessages.length)];
            // On obtient un id au hasard en multipliant
            // la longueur du tableau par un nombre au hasard entre 0 et 1 (exclus)
            // et on arrondi a l'entier inferieur

            // On enregistre le message d'alerte et son type
            setAlertMessage(randomEvent.message);
            setAlertType(randomEvent.type);
            setAlertVisible(true); // affiche l'alerte
            setTimeout(() => { setAlertVisible(false) }, 3000); // on cache l'alerte au bout de 3 secondes

            // On applique l'effet selon l'evenement
            if (randomEvent.id === 1) {
                setMoney(moneyValue => Math.min(moneyValue + 20, 100)); // bonus: billet de +20‚Ç¨
            } else if (randomEvent.id === 2) {
                setMoney(moneyValue => Math.max(moneyValue - 30, 0)); // malus: loyer -30‚Ç¨
            } else if (randomEvent.id === 3) {
                setMood(moodValue => Math.min(moodValue + 10, 100)); // bonus: sortie cin√© +10
            } else if (randomEvent.id === 4) {
                setEnergy(energyValue => Math.max(energyValue - 15, 0)); // malus: maladie -15
            }


            // On relance le cycle avec un nouveau d√©lai

            const newRandomDelay = Math.floor(Math.random() * 30001) + 30000;
            //  Math.random() g√©n√®re un nombre al√©atoire entre 0 et 1 que l'ont mulitpli par le d√©lai minimun (30 secondes)
            //  Math.random() * 30001) va donner un nombre compris entre 0 et 30001 (exclus)
            //  On ajoute 30000 pour avoir le d√©lai max 60 secondes
            //  Math.floor arrondit √† l'entier inf√©rieur

            timeoutId = setTimeout(getRandomEvent, newRandomDelay);

        }

        // D√©marrage du cycle des √©venements au montage du composant
        const FirstRandomDelay = Math.floor(Math.random() * 30001) + 30000;
        timeoutId = setTimeout(getRandomEvent, FirstRandomDelay);

        return () => clearTimeout(timeoutId); // pour arreter le timer au demontage du composant (sinon tourne en boucle)

    }, []) // d√©pendance vide car on veut que cela s'ex√©cute qu'une seule fois au chargement


    ////// Gestion du Gameover
    useEffect(() => {
        if (energy === 0) {
            setGameOver(true); // On attribue "true" a Gameover qui servira de condition de fin de partie 
            setGameOverMessage("Votre personnage s'est √©vanoui d‚Äô√©puisement‚Ä¶");
        } else if (mood === 0) {
            setGameOver(true);
            setGameOverMessage("Votre personnage est trop triste pour continuer‚Ä¶");
        } else if (money === 0) {
            setGameOver(true);
            setGameOverMessage("Votre personnage fait faillite‚Ä¶");
        }
    }, [energy, mood, money]); // On surveille les changements des statistiques (d√©pendance) pour d√©clencher le GameOver


    return (
        <StatisticContext.Provider value={{ energy, setEnergy, mood, setMood, money, setMoney, resetStats, Eat, Work, Sleep, Play, alertMessage, alertType, alertVisible, gameOver, gameOverMessage }}>
            {children}
        </StatisticContext.Provider>
    );
}

// On cr√©√© un hook pour utiliser le contexte
export function useStatistic() {
    return useContext(StatisticContext);
}